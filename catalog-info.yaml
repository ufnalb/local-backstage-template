apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: common-git-repo-project
  title: Common Git Repository Project
  description: Template for a project that is hosted in a common git repository.
  owner: Platform-Team
  tags:
    - github-common
spec:
  type: service

  parameters:
    - title: Fill up below options to create a new Common Git Repository Project
      description: |
        Repository Naming Convention
        - Prefix with dsg-icis-
          All repositories should begin with the prefix dsg-icis- This prefix identifies the repository as part of the DSG-ICIS market.

        - Meaningful Repository Name
          The repository name must be meaningful and relevant to the assets or components it contains. For example, if the repository contains plant-cost-evaluator-bff, the name should reflect that, e.g., dsg-icis-plant-cost-evaluator-bff

        - Include the Component Type at the End
          The repository name should include the component type at the end. This provides additional context about what the repository contains.

        - Infra-related Repositories
          For infrastructure-related repositories, the prefix should be dsg-icis-opsinf. These repositories deal with operational and infrastructure-related code or assets.
          Example: dsg-icis-opsinf-kapowmodule
          
    - title: Configure
      description: Where this repo will be created
      required:
        - repoUrl
      properties: 
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          default: 	github.com?owner=LexisNexis-RBA&repo=dsg-icis-&organization=LexisNexis-RBA
          ui:options:
            allowedOrganizations: 
              - LexisNexis-RBA
            allowedHosts:
              - github.com

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch
      name: Fetch application template
      action: fetch:template
      input:
        url: ./content
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        defaultBranch: 'main'
        repoVisibility: internal
        gitCommitMessage: 'initial commit [skip ci]'
        description: This is where the code will be published to
        repoUrl: ${{ parameters.repoUrl }}
        collaborators: 
          # you must have the first two!
          - user: svc-icis-gh-auto
            access: admin
          - team: icis-admins
            access: admin
          - team: ICIS-Vikings-Admin
            access: admin
          - team: ICIS-Vikings
            access: write

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
